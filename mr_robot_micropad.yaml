# IMPORTANT: Make sure to replace the API key and OTA passowrd placeholders with your actual config!

esphome:
  name: mr_robot_micropad
  friendly_name: Mr. Robot

esp8266:
  board: d1_mini
  early_pin_init: false

# Enable logging
logger:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "mr_robot"
    password: "r6NOjztWJLod"

# Enable Home Assistant API
api:
  encryption:
    key: # your_key_here

ota:
  - platform: esphome
    id: my_ota
    password: # your_passoword_here

captive_portal:

globals:
  - id: look_dx
    type: int
    restore_value: no
    initial_value: '0'
  - id: look_dy
    type: int
    restore_value: no
    initial_value: '0'
  - id: look_until
    type: uint32_t
    restore_value: no
    initial_value: '0'
  - id: look_duration
    type: uint32_t
    restore_value: no
    initial_value: '2000'
  - id: shutdown_until
    type: uint32_t
    restore_value: no
    initial_value: '0'

i2c:
  sda: D2
  scl: D1
  scan: false
  frequency: 400000

display:
  - platform: ssd1306_i2c
    id: oled
    model: "SSD1306 128x64"
    address: 0x3C
    update_interval: 60ms
    lambda: |-
      static const int EYE_RADIUS   = 20;
      static const int PUPIL_RADIUS = 7;
      static const int POS[8][2]    = {{-8,0}, {0,0}, {8,0}, {0,0}, {0,-8}, {0,0}, {0,8}, {0,0}};
      static const int HOLD[8]      = {3000,2000,3000,2000,3000,2000,3000,2000};
      static const int MOVE_MS      = 300;
      static const int BLINK_MS     = 150;
      static const float SHIFT_F    = 0.8f;
      const int CENTERS[2][2]       = {{40,32}, {88,32}};
      uint32_t now = millis();

      // ---- POWER-OFF ANIMATION ----
      if (id(shutdown_until) > 0) {
        it.clear();
        static const int EYE_RADIUS = 20;
        const int CENTERS[2][2] = {{40, 32}, {88, 32}};
        for (auto &c : CENTERS) {
          it.line(c[0] - EYE_RADIUS, c[1], c[0] + EYE_RADIUS, c[1], Color::WHITE);
        }
        if (millis() >= id(shutdown_until)) {
          id(oled).turn_off();
          id(shutdown_until) = 0;
        }
        return;
      }

      // ---- EYES ANIMATION HANDLER ----
      auto draw_eye = [&](int dx, int dy){
        for (auto &c : CENTERS) {
          int ex = c[0] + dx * SHIFT_F;
          int ey = c[1] + dy * SHIFT_F;
          it.circle(ex, ey, EYE_RADIUS, Color::WHITE);
          it.filled_circle(ex + dx * SHIFT_F, ey + dy * SHIFT_F, PUPIL_RADIUS, Color::WHITE);
        }
      };

      auto draw_blink = [&](int dx, int dy){
        for (auto &c : CENTERS) {
          int x0 = c[0] - EYE_RADIUS + dx * SHIFT_F;
          int x1 = c[0] + EYE_RADIUS + dx * SHIFT_F;
          int y  = c[1] + dy  * SHIFT_F;
          it.line(x0, y, x1, y, Color::WHITE);
        }
      };

      static int     idx         = 0;
      static int     state       = 0;  // 0=move,1=hold,2=blink
      static uint32_t last_ms    = millis();
      static uint32_t next_blink = millis() + 3000 + random(0,2000);
      static int     start_x     = 0;
      static int     start_y     = 0;
      static int     curr_dx     = 0;
      static int     curr_dy     = 0;

      // smooth return when look expires
      if (id(look_until) && now >= id(look_until)) {
        start_x        = id(look_dx);
        start_y        = id(look_dy);
        last_ms        = now;
        state          = 0;
        id(look_until) = 0;
      }

      it.clear();

      // forced look override
      if (now < id(look_until)) {
        curr_dx = id(look_dx);
        curr_dy = id(look_dy);
        draw_eye(curr_dx, curr_dy);
        return;
      }

      // normal idle animation
      if (state == 0) {
        float t = float(now - last_ms) / MOVE_MS;
        if (t >= 1.0f) {
          curr_dx = POS[idx][0];
          curr_dy = POS[idx][1];
          draw_eye(curr_dx, curr_dy);
          last_ms = now;
          state = 1;
        } else {
          int ix = start_x + (POS[idx][0] - start_x) * t;
          int iy = start_y + (POS[idx][1] - start_y) * t;
          curr_dx = ix;
          curr_dy = iy;
          draw_eye(ix, iy);
        }
      } else if (state == 1) {
        curr_dx = POS[idx][0];
        curr_dy = POS[idx][1];
        draw_eye(curr_dx, curr_dy);
        if (now - last_ms >= HOLD[idx]) {
          start_x = POS[idx][0];
          start_y = POS[idx][1];
          idx = (idx + 1) % 8;
          last_ms = now;
          state = 0;
        }
      }

      // blink interrupt
      if (state != 2 && now >= next_blink) {
        state = 2;
        last_ms = now;
      }
      if (state == 2) {
        draw_blink(curr_dx, curr_dy);
        if (now - last_ms >= BLINK_MS) {
          next_blink = now + 3000 + random(0,2000);
          last_ms = now;
          state = 1;
        }
      }

select:
  - platform: template
    name: "Button 1"
    id: select1
    optimistic: true
    options:
      - none
      - single press
      - double press
      - tripple press
      - hold
    initial_option: none

  - platform: template
    name: "Button 2"
    id: select2
    optimistic: true
    options:
      - none
      - single press
      - double press
      - tripple press
      - hold
    initial_option: none

binary_sensor:

  # Button 1
  - platform: gpio
    pin:
      number: D5
      mode: INPUT_PULLUP
      inverted: True
    name: "Button 1"
    id: button1
    filters:
      - delayed_on: 10ms
    on_multi_click:
      # Single Click
      - timing:
          - ON for at most .49s
          - OFF for at least 0.25s
        then:
          - homeassistant.event:
              event: esphome.button_pressed
              data:
                message: "button 1 single"
          - select.set:
              id: select1
              option: "single press"
          - select.set:
              id: select1
              option: "none"
          - lambda: |-
              id(oled).turn_on();
              id(shutdown_until) = 0;
              // button 1: look down-left
              id(look_dx)    = -8;
              id(look_dy)    =  8;
              id(look_until) = millis() + id(look_duration);
          - logger.log: "button 1 single"
        invalid_cooldown: 0.5s

      # Double Click
      - timing:
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - homeassistant.event:
              event: esphome.button_pressed
              data:
                message: "button 1 double"
          - select.set:
              id: select1
              option: "double press"
          - select.set:
              id: select1
              option: "none"
          - lambda: |-
              id(oled).turn_on();
              id(shutdown_until) = 0;
              // button 1: look down-left
              id(look_dx)    = -8;
              id(look_dy)    =  8;
              id(look_until) = millis() + id(look_duration);
          - logger.log: "button 1 double"
        invalid_cooldown: 0.5s

      # Tripple Click
      - timing:
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - homeassistant.event:
              event: esphome.button_pressed
              data:
                message: "button 1 tripple"
          - select.set:
              id: select1
              option: "tripple press"
          - select.set:
              id: select1
              option: "none"
          - lambda: |-
              id(oled).turn_on();
              id(shutdown_until) = 0;
              // button 1: look down-left
              id(look_dx)    = -8;
              id(look_dy)    =  8;
              id(look_until) = millis() + id(look_duration);
          - logger.log: "button 1 tripple"
        invalid_cooldown: 0.5s

      # Hold
      - timing:
          - ON for at least 1.5s
        then:
          - homeassistant.event:
              event: esphome.button_pressed
              data:
                message: "button 1 hold"
          - select.set:
              id: select1
              option: "hold"
          - select.set:
              id: select1
              option: "none"
          - lambda: |-
              id(oled).turn_on();
              id(shutdown_until) = 0;
              // button 1: look down-left
              id(look_dx)    = -8;
              id(look_dy)    =  8;
              id(look_until) = millis() + id(look_duration);
          - logger.log: "button 1 hold"
        invalid_cooldown: 0.5s

  # Button 2
  - platform: gpio
    pin:
      number: D6
      mode: INPUT_PULLUP
      inverted: True
    name: "Button 2"
    id: button2
    filters:
      - delayed_on: 10ms
    on_multi_click:
      # Single Click
      - timing:
          - ON for at most .49s
          - OFF for at least 0.25s
        then:
          - homeassistant.event:
              event: esphome.button_pressed
              data:
                message: "button 2 single"
          - select.set:
              id: select2
              option: "single press"
          - select.set:
              id: select2
              option: "none"
          - lambda: |-
              id(oled).turn_on();
              id(shutdown_until) = 0;
              // button 1: look down-right
              id(look_dx)    =  8;
              id(look_dy)    =  8;
              id(look_until) = millis() + id(look_duration);
          - logger.log: "button 2 single"
        invalid_cooldown: 0.5s

      # Double Click
      - timing:
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - homeassistant.event:
              event: esphome.button_pressed
              data:
                message: "button 2 double"
          - select.set:
              id: select2
              option: "double press"
          - select.set:
              id: select2
              option: "none"
          - lambda: |-
              id(oled).turn_on();
              id(shutdown_until) = 0;
              // button 1: look down-right
              id(look_dx)    =  8;
              id(look_dy)    =  8;
              id(look_until) = millis() + id(look_duration);
          - logger.log: "button 2 double"
        invalid_cooldown: 0.5s

      # Tripple Click
      - timing:
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - homeassistant.event:
              event: esphome.button_pressed
              data:
                message: "button 2 tripple"
          - select.set:
              id: select2
              option: "tripple press"
          - select.set:
              id: select2
              option: "none"
          - lambda: |-
              id(oled).turn_on();
              id(shutdown_until) = 0;
              // button 1: look down-right
              id(look_dx)    =  8;
              id(look_dy)    =  8;
              id(look_until) = millis() + id(look_duration);
          - logger.log: "button 2 tripple"
        invalid_cooldown: 0.5s

      # Hold
      - timing:
          - ON for at least 1.5s
        then:
          - homeassistant.event:
              event: esphome.button_pressed
              data:
                message: "button 2 hold"
          - select.set:
              id: select2
              option: "hold"
          - select.set:
              id: select2
              option: "none"
          - lambda: |-
              id(oled).turn_on();
              id(shutdown_until) = 0;
              // button 1: look down-right
              id(look_dx)    =  8;
              id(look_dy)    =  8;
              id(look_until) = millis() + id(look_duration);
          - logger.log: "button 2 hold"
        invalid_cooldown: 0.5s

switch:
  - platform: template
    name: "OLED Display Power"
    optimistic: true
    turn_on_action:
      - lambda: |-
          id(oled).turn_on();
    turn_off_action:
      - lambda: |-
          id(shutdown_until) = millis() + 2000;
